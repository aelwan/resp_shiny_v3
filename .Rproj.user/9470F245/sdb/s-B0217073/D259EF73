{
    "collab_server" : "",
    "contents" : "library(knitr)\ninstall.packages(\"shiny\")\nrsconnect::setAccountInfo(name='hbrc-pawel',\n                          token='1D17717487CCDD5CF2677FACD1E9DF1F',\n                          secret='m2kzvH9xJ60a/NvkTN84w8uNB3KPVtjxzkYxhFmP')\n\ncreateCertificateFile <- function(certificate) {\n  certificateFile <- NULL\n  \n  # check the R option first, then fall back on the environment variable\n  systemStore <- getOption(\"rsconnect.ca.bundle\")\n  if (is.null(systemStore) || !nzchar(systemStore)) {\n    systemStore <- Sys.getenv(\"RSCONNECT_CA_BUNDLE\")\n  }\n  \n  # start by checking for a cert file specified in an environment variable\n  if (nzchar(systemStore) && file.exists(systemStore)) {\n    certificateFile <- systemStore\n  }\n  \n  # if no certificate contents specified, we're done\n  if (is.null(certificate))\n    return(certificateFile)\n  \n  # if we don't have a certificate file yet, try to find the system store\n  if (is.null(certificateFile)) {\n    if (.Platform$OS.type == \"unix\") {\n      # search known locations on Unix-like\n      stores <- c(\"/etc/ssl/certs/ca-certificates.crt\",\n                  \"/etc/pki/tls/certs/ca-bundle.crt\",\n                  \"/usr/share/ssl/certs/ca-bundle.crt\",\n                  \"/usr/local/share/certs/ca-root.crt\",\n                  \"/etc/ssl/cert.pem\",\n                  \"/var/lib/ca-certificates/ca-bundle.pem\")\n    } else {\n      # mirror behavior of curl on Windows, which looks in system folders,\n      # the working directory, and %PATH%; use our own CA cert bundle as a\n      # final fallback\n      stores <- c(file.path(getwd(), \"curl-ca-bundle.crt\"),\n                  \"C:/Windows/System32/curl-ca-bundle.crt\",\n                  \"C:/Windows/curl-ca-bundle.crt\",\n                  file.path(strsplit(Sys.getenv(\"PATH\"), \";\", fixed = TRUE),\n                            \"curl-ca-bundle.crt\"),\n                  system.file(package=\"rsconnect\", \"cert\", \"cacert.pem\"))\n    }\n    for (store in stores) {\n      if (file.exists(store)) {\n        # if the bundle exists, stop here\n        certificateFile <- store\n        break\n      }\n    }\n    \n    # if we didn't find the system store, it's okay; the fact that we're here\n    # means that we have a server-specific certificate so it's probably going\n    # to be all right to use only that cert.\n  }\n  \n  # create a temporary file to house the certificates\n  certificateStore <- tempfile(pattern = \"cacerts\", fileext = \".pem\")\n  \n  # open temporary cert store\n  con <- file(certificateStore, open = \"at\")\n  on.exit(close(con), add = TRUE)\n  \n  # copy the contents of the certificate file into the store, if we found one\n  # (we don't do a straight file copy since we don't want to inherit or\n  # correct permissions)\n  if (!is.null(certificateFile)) {\n    certLines <- readLines(certificateFile, warn = FALSE)\n    writeLines(text = certLines, con = con)\n  }\n  \n  # append the server-specific certificate (with a couple of blank lines)\n  writeLines(text = c(\"\", \"\", certificate), con = con)\n  \n  return(certificateStore)\n}\n\ninferCertificateContents <- function(certificate) {\n  # certificate can be specified as either a character vector or a filename;\n  # infer which we're dealing with\n  \n  # tolerate NULL, which is a valid case representing no certificate\n  if (is.null(certificate) || identical(certificate, \"\"))\n    return(NULL)\n  \n  # collapse to a single string if we got a vector of lines\n  if (length(certificate) > 1)\n    certificate <- paste(certificate, collapse = \"\\n\")\n  \n  # looks like ASCII armored certificate data, return as-is\n  if (identical(substr(certificate, 1, 27), \"-----BEGIN CERTIFICATE-----\"))\n    return(certificate)\n  \n  # looks like a file; return its contents\n  if (file.exists(certificate)) {\n    return(paste(readLines(con = certificate, warn = FALSE), collapse = \"\\n\"))\n  }\n  \n  # doesn't look like something we can deal with\n  stop(\"Invalid certificate '\", substr(certificate, 1, 100),\n       if(nchar(certificate) > 100) \"...\" else \"\", \"'. Specify the certificate \",\n       \"as either an ASCII armored string, beginning with -----BEGIN \",\n       \"CERTIFICATE----, or a valid path to a file containing the certificate.\")\n}\n\ntest <- createCertificateFile()\n",
    "created" : 1548725053549.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "6|48|77|0|\n79|51|105|0|\n",
    "hash" : "2658729315",
    "id" : "D259EF73",
    "lastKnownWriteTime" : 1548724903,
    "last_content_update" : 1548729182304,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}