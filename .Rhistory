shiny::runApp()
load(file = "data/params/params1.rdata") # this contains definition of zones and times available
View(rivers)
load(file = "data/params/params1.rdata") # this contains definition of zones and times available
rivers$river <- gsub("Mgaruroro","Ngaruroro",rivers$river)
View(rivers)
rivers$descr <- gsub("Mgaruroro","Ngaruroro",rivers$descr)
View(rivers)
save(rivers,times,file = "data/params/params1.rdata")
load(file = "data/params/params1.rdata") # this contains definition of zones and times available
runApp()
library(tmap)
library(tmaptools)
library(OpenStreetMap)
library(raster)
library(sf)
folder <- "C:/PAWEL/R/resp_shiny/data/raster"
file <- "RF_summer_allzones_7_1_.Rdata"
file_foler <- paste(folder,file,sep="/")
load (file_foler)
RF7 <- RF
file <- "RF_summer_allzones_150_1_.Rdata"
file_foler <- paste(folder,file,sep="/")
load (file_foler)
RF150 <- RF
plot(RF)
plot(RF7)
RF_z1 <- RF7
RF_z1[RF150 <60] <- 3
RF_z1[RF150 >=60] <- 2
RF_z1[RF7 >= 90] <- 1
plot(RF_z1)
nztm <-"+proj=tmerc +lat_0=0 +lon_0=173 +k=0.9996 +x_0=1600000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
crs(RF_z1) <- nztm
pal1 <- c("red","orange","green")
osm_map <- read_osm(RF_z1,type ="stamen-terrain")
plot(osm_map)
tm <- qtm(osm_map)+
tm_shape(RF_z1)+
tm_raster("layer",
style = "cat",
palette = "Spectral",
alpha = 0.5,
title = "zone number")+
tm_compass(position = c("left","bottom"))+
tm_scale_bar(position = c("left","bottom"))
tm
runApp()
wells <- data.frame(x = 1930000,
y= 5605000,
Q= 50,
L=1)
wells1 <- st_as_sf(wells,coords = c("x", "y"),crs = 2193) %>%
st_transform(4326)
wells1 <- as(wells1, 'Spatial')
osm_map <- read_osm(wells1,type ="stamen-terrain")
plot(wells1)
wells1
wells <- data.frame(x = c(1930000,1930000+1000),
y= c(5605000,5605000+1000),
Q= c(50,50),
L= c(1,1) )
wells1 <- st_as_sf(wells,coords = c("x", "y"),crs = 2193) %>%
st_transform(4326)
wells1 <- as(wells1, 'Spatial')
plot(wells1)
tm <- qtm(osm_map)+
tm_shape(wells1)+
tm_dots()
tm
runApp()
tmaptools::palette_explorer()
install.packages("shinyjs")
library(shinyjs)
tmaptools::palette_explorer()
runApp()
runApp()
runApp()
runApp()
today()
timestamp()
##------ Tue Feb 12 10:23:46 2019 ------##
runApp()
##------ Tue Feb 12 10:28:46 2019 ------##
timestamp()
##------ Tue Feb 12 10:31:27 2019 ------##
Sys.time()
runApp()
runApp()
time <- 49
time2 <- reactive({
time2 <- times %>% filter(id = time) %>%
select(duration)
})
time2
time2 <- times %>% filter(id = time) %>%
select(duration)
times
time2 <- times %>% filter(id == time) %>%
select(duration)
time2
unlist(time2)
time2 <- times %>% filter(id == time) %>%
select(duration)
time2 <- unlist(time2)
time2 <- unname(time2)
zone <- "ALLZN"
zone <- "ALLZN"
zone2 <- rivers %>%
filter(river == zone %>%
select(descr)
time2 <- unlist(time2)
time2 <- unname(time2)
})
zone2 <- rivers %>%
filter(river == zone) %>%
select(descr)
zone2
zone2 <- unlist(zone2)
zone2 <- unname(zone2)
zone2
runApp()
runApp()
x <- c("a", "b", "aaaaaaaaaaa")
toString(x)
toString(x, width = 8)
toString(x)
x <- list("a", "b", "aaaaaaaaaaa")
toString(x)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tot_effect_all <-data.frame(`Stream Depletion` = c(5,1,10,
row.names = c("mean Q50","minimum Q10","maximum Q90"))
SDR_all <- data.frame(`Stream Depletion Ratio` = c(0.5,0.1,2),
row.names = c("mean Q50","minimum Q10","maximum Q90"))
results_df <- reaif(input$pump_in_type == "single point"){ bind_cols(tot_effect_all,SDR_all}else{ tot_effect_all}
tot_effect_all <-data.frame(`Stream Depletion` = c(5,1,10,
row.names = c("mean Q50","minimum Q10","maximum Q90"))
tot_effect_all <-data.frame(`Stream Depletion` = c(5,1,10),
row.names = c("mean Q50","minimum Q10","maximum Q90"))
SDR_all <- data.frame(`Stream Depletion Ratio` = c(0.5,0.1,2),
row.names = c("mean Q50","minimum Q10","maximum Q90"))
bind_cols(tot_effect_all,SDR_all
itest <- 1
results_df <- reaif(itest== 1){ bind_cols(tot_effect_all,SDR_all)}else{ tot_effect_all}
results_df <- if(itest== 1){ bind_cols(tot_effect_all,SDR_all)}else{ tot_effect_all}
results_df
SDR_all
results_df <- if(itest== 1){ cbind(tot_effect_all,SDR_all)}else{ tot_effect_all}
results_df
results_df <- if(itest== 1){ cbind(tot_effect_all,SDR_all)}else{ tot_effect_all}
results_df
itest
tot_effect_all
SDR_all
results_df <- if(itest== 1){ cbind(tot_effect_all,SDR_all)}else{ tot_effect_all}
results_df
runApp()
runApp()
tot_effect_all <-data.frame(`Stream Depletion` = c(5,1,10))
SDR_all <- data.frame(`Stream Depletion Ratio` = c(0.5,0.1,2))
results_df <- cbind(tot_effect_all,SDR_all)
row.names(results_df) <- c("mean Q50","minimum Q10","maximum Q90")
results_df
runApp()
runApp()
runApp()
runApp()
runApp()
options(rsconnect.check.certificate = FALSE)
rsconnect::deployApp()
options(rsconnect.check.certificate = FALSE)
rsconnect::deployApp()
runApp()
runApp()
options(rsconnect.check.certificate = FALSE)
rsconnect::deployApp()
load("data/wells/wells_hist.rdata")
load("data/wells/all_dat_TR_RC_mult.Rdata")
load("data/wells/all_dat_TR_RC_mult.Rdata")
load("data/wells/all_dat_TR_RC_mult.Rdata")
wells_hist <- all_dat_TR_RC_mult %>%
filter(type %in% c("irr","PWS","IND")) %>%
mutate(x = E,
y= N,
Q= Q/3600/24*1000) %>%
select(x,y,Q,L,type,date,bore)
save(wells_hist,file="data/wells/wells_hist.rdata")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
wells_hist <- all_dat_TR_RC_mult %>%
filter(type %in% c("irr","PWS","IND")) %>%
mutate(x = E,
y= N,
Q= Q/3600/24*1000) %>%
select(x,y,Q,L,type,date,bore) %>%
droplevels()
save(wells_hist,file="data/wells/wells_hist.rdata")
runApp()
sum(wells_hist$Q)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(rsconnect.check.certificate = FALSE)
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(rsconnect.check.certificate = FALSE)
rsconnect::deployApp()
runApp()
